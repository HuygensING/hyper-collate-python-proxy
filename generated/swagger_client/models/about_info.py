# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

# from swagger_client.models.file import file  # noqa: F401,E501


class AboutInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_name': 'str',
        'started_at': 'str',
        'version': 'str',
        'build_date': 'str',
        'commit_id': 'str',
        'scm_branch': 'str',
        'project_dir': 'file'
    }

    attribute_map = {
        'app_name': 'appName',
        'started_at': 'startedAt',
        'version': 'version',
        'build_date': 'buildDate',
        'commit_id': 'commitId',
        'scm_branch': 'scmBranch',
        'project_dir': 'projectDir'
    }

    def __init__(self, app_name=None, started_at=None, version=None, build_date=None, commit_id=None, scm_branch=None, project_dir=None):  # noqa: E501
        """AboutInfo - a model defined in Swagger"""  # noqa: E501

        self._app_name = None
        self._started_at = None
        self._version = None
        self._build_date = None
        self._commit_id = None
        self._scm_branch = None
        self._project_dir = None
        self.discriminator = None

        if app_name is not None:
            self.app_name = app_name
        if started_at is not None:
            self.started_at = started_at
        if version is not None:
            self.version = version
        if build_date is not None:
            self.build_date = build_date
        if commit_id is not None:
            self.commit_id = commit_id
        if scm_branch is not None:
            self.scm_branch = scm_branch
        if project_dir is not None:
            self.project_dir = project_dir

    @property
    def app_name(self):
        """Gets the app_name of this AboutInfo.  # noqa: E501


        :return: The app_name of this AboutInfo.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this AboutInfo.


        :param app_name: The app_name of this AboutInfo.  # noqa: E501
        :type: str
        """

        self._app_name = app_name

    @property
    def started_at(self):
        """Gets the started_at of this AboutInfo.  # noqa: E501


        :return: The started_at of this AboutInfo.  # noqa: E501
        :rtype: str
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this AboutInfo.


        :param started_at: The started_at of this AboutInfo.  # noqa: E501
        :type: str
        """

        self._started_at = started_at

    @property
    def version(self):
        """Gets the version of this AboutInfo.  # noqa: E501


        :return: The version of this AboutInfo.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AboutInfo.


        :param version: The version of this AboutInfo.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def build_date(self):
        """Gets the build_date of this AboutInfo.  # noqa: E501


        :return: The build_date of this AboutInfo.  # noqa: E501
        :rtype: str
        """
        return self._build_date

    @build_date.setter
    def build_date(self, build_date):
        """Sets the build_date of this AboutInfo.


        :param build_date: The build_date of this AboutInfo.  # noqa: E501
        :type: str
        """

        self._build_date = build_date

    @property
    def commit_id(self):
        """Gets the commit_id of this AboutInfo.  # noqa: E501


        :return: The commit_id of this AboutInfo.  # noqa: E501
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """Sets the commit_id of this AboutInfo.


        :param commit_id: The commit_id of this AboutInfo.  # noqa: E501
        :type: str
        """

        self._commit_id = commit_id

    @property
    def scm_branch(self):
        """Gets the scm_branch of this AboutInfo.  # noqa: E501


        :return: The scm_branch of this AboutInfo.  # noqa: E501
        :rtype: str
        """
        return self._scm_branch

    @scm_branch.setter
    def scm_branch(self, scm_branch):
        """Sets the scm_branch of this AboutInfo.


        :param scm_branch: The scm_branch of this AboutInfo.  # noqa: E501
        :type: str
        """

        self._scm_branch = scm_branch

    @property
    def project_dir(self):
        """Gets the project_dir of this AboutInfo.  # noqa: E501


        :return: The project_dir of this AboutInfo.  # noqa: E501
        :rtype: file
        """
        return self._project_dir

    @project_dir.setter
    def project_dir(self, project_dir):
        """Sets the project_dir of this AboutInfo.


        :param project_dir: The project_dir of this AboutInfo.  # noqa: E501
        :type: file
        """

        self._project_dir = project_dir

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AboutInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
